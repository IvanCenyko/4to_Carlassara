
Display7SEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075e  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000309  00000000  00000000  0000102f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003da  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000108  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	53 00       	.word	0x0053	; ????
  6a:	56 00       	.word	0x0056	; ????
  6c:	59 00       	.word	0x0059	; ????
  6e:	5c 00       	.word	0x005c	; ????
  70:	5f 00       	.word	0x005f	; ????
  72:	62 00       	.word	0x0062	; ????
  74:	65 00       	.word	0x0065	; ????
  76:	68 00       	.word	0x0068	; ????
  78:	6b 00       	.word	0x006b	; ????
  7a:	6d 00       	.word	0x006d	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <_Z9_7S_printc>:

void _7S_print (char num);

void _7S_print(char num) {
	
	switch (num) {
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	91 05       	cpc	r25, r1
  9a:	08 f5       	brcc	.+66     	; 0xde <_Z9_7S_printc+0x4a>
  9c:	fc 01       	movw	r30, r24
  9e:	ec 5c       	subi	r30, 0xCC	; 204
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	0c 94 88 00 	jmp	0x110	; 0x110 <__tablejump2__>
		case 0: PORTB = 64;
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	85 b9       	out	0x05, r24	; 5
		break;
  aa:	08 95       	ret
		case 1: PORTB = 121;
  ac:	89 e7       	ldi	r24, 0x79	; 121
  ae:	85 b9       	out	0x05, r24	; 5
		break;
  b0:	08 95       	ret
		case 2: PORTB = 36;
  b2:	84 e2       	ldi	r24, 0x24	; 36
  b4:	85 b9       	out	0x05, r24	; 5
		break;
  b6:	08 95       	ret
		case 3:PORTB = 48;
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	85 b9       	out	0x05, r24	; 5
		break;
  bc:	08 95       	ret
		case 4: PORTB = 25;
  be:	89 e1       	ldi	r24, 0x19	; 25
  c0:	85 b9       	out	0x05, r24	; 5
		break;
  c2:	08 95       	ret
		case 5: PORTB = 18;
  c4:	82 e1       	ldi	r24, 0x12	; 18
  c6:	85 b9       	out	0x05, r24	; 5
		break;
  c8:	08 95       	ret
		case 6: PORTB = 2;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	85 b9       	out	0x05, r24	; 5
		break;
  ce:	08 95       	ret
		case 7: PORTB = 120;
  d0:	88 e7       	ldi	r24, 0x78	; 120
  d2:	85 b9       	out	0x05, r24	; 5
		break;
  d4:	08 95       	ret
		case 8: PORTB = 0;
  d6:	15 b8       	out	0x05, r1	; 5
		break;
  d8:	08 95       	ret
		case 9: PORTB = 16;
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <main>:


int main(void)
{

 DDRB = 255;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 b9       	out	0x04, r24	; 4
 DDRD = 0;
  e4:	1a b8       	out	0x0a, r1	; 10
 PORTB = 255;
  e6:	85 b9       	out	0x05, r24	; 5
  
  unsigned char dnum = 0;
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  
  while (1)
  {
	  
	if ( PIND & ( 1 << PD0 ) ) {
  ea:	48 99       	sbic	0x09, 0	; 9
		dnum++ ;
  ec:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	if ( PIND & ( 1 << PD1 ) ) {
  ee:	49 99       	sbic	0x09, 1	; 9
		dnum-- ;		
  f0:	c1 50       	subi	r28, 0x01	; 1
	}

	
	if ( PIND & ( 1 << PD2 ) )  {
  f2:	4a 99       	sbic	0x09, 2	; 9
		dnum = 0;
  f4:	c0 e0       	ldi	r28, 0x00	; 0
	}

_7S_print (dnum);
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 4a 00 	call	0x94	; 0x94 <_Z9_7S_printc>
  fc:	ca 30       	cpi	r28, 0x0A	; 10
  fe:	08 f0       	brcs	.+2      	; 0x102 <main+0x22>
 100:	c9 e0       	ldi	r28, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e4       	ldi	r24, 0x4F	; 79
 104:	93 ec       	ldi	r25, 0xC3	; 195
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x26>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x2c>
 10c:	00 00       	nop
 10e:	ed cf       	rjmp	.-38     	; 0xea <main+0xa>

00000110 <__tablejump2__>:
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	05 90       	lpm	r0, Z+
 116:	f4 91       	lpm	r31, Z
 118:	e0 2d       	mov	r30, r0
 11a:	09 94       	ijmp

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
