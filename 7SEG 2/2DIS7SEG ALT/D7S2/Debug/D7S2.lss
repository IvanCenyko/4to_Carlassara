
D7S2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a7  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000610  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e1  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000370  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_13>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	7a 00       	.word	0x007a	; ????
  6a:	7c 00       	.word	0x007c	; ????
  6c:	7e 00       	.word	0x007e	; ????
  6e:	80 00       	.word	0x0080	; ????
  70:	82 00       	.word	0x0082	; ????
  72:	84 00       	.word	0x0084	; ????
  74:	86 00       	.word	0x0086	; ????
  76:	88 00       	.word	0x0088	; ????
  78:	8a 00       	.word	0x008a	; ????
  7a:	8c 00       	.word	0x008c	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
unsigned char c1 = 0;
unsigned char c2 = 0;

int main(void)
{
   DDRB = 255;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	84 b9       	out	0x04, r24	; 4
   DDRD = 255;
  a8:	8a b9       	out	0x0a, r24	; 10
   PORTB = 64;
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	85 b9       	out	0x05, r24	; 5
   PORTD = 64;
  ae:	8b b9       	out	0x0b, r24	; 11

   TCNT1 = 49911;
  b0:	87 ef       	ldi	r24, 0xF7	; 247
  b2:	92 ec       	ldi	r25, 0xC2	; 194
  b4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  b8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   TCCR1B = 0X03;
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
   TIMSK1 = 0X01;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

   sei();
  c8:	78 94       	sei
	  break;
	  case 7: PORTB = 120;
	  break;
	  case 8: PORTB = 0;
	  break;
	  case 9: PORTB = 16;
  ca:	10 e1       	ldi	r17, 0x10	; 16
	  break;
	  case 5: PORTB = 18;
	  break;
	  case 6: PORTB = 2;
	  break;
	  case 7: PORTB = 120;
  cc:	d8 e7       	ldi	r29, 0x78	; 120
	  break;
	  case 4: PORTB = 25;
	  break;
	  case 5: PORTB = 18;
	  break;
	  case 6: PORTB = 2;
  ce:	c2 e0       	ldi	r28, 0x02	; 2
	  break;
	  case 3: PORTB = 48;
	  break;
	  case 4: PORTB = 25;
	  break;
	  case 5: PORTB = 18;
  d0:	72 e1       	ldi	r23, 0x12	; 18
	  break;
	  case 2: PORTB = 36;
	  break;
	  case 3: PORTB = 48;
	  break;
	  case 4: PORTB = 25;
  d2:	69 e1       	ldi	r22, 0x19	; 25
	  break;
	  case 1: PORTB = 121;
	  break;
	  case 2: PORTB = 36;
	  break;
	  case 3: PORTB = 48;
  d4:	50 e3       	ldi	r21, 0x30	; 48
	  switch (c1){
      case 0: PORTB = 64;
	  break;
	  case 1: PORTB = 121;
	  break;
	  case 2: PORTB = 36;
  d6:	44 e2       	ldi	r20, 0x24	; 36
    while (1) 
    { 
	  switch (c1){
      case 0: PORTB = 64;
	  break;
	  case 1: PORTB = 121;
  d8:	39 e7       	ldi	r19, 0x79	; 121
   sei();
 
    while (1) 
    { 
	  switch (c1){
      case 0: PORTB = 64;
  da:	20 e4       	ldi	r18, 0x40	; 64

   sei();
 
    while (1) 
    { 
	  switch (c1){
  dc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <c1>
  e0:	8e 2f       	mov	r24, r30
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	91 05       	cpc	r25, r1
  e8:	c0 f4       	brcc	.+48     	; 0x11a <main+0x76>
  ea:	fc 01       	movw	r30, r24
  ec:	ec 5c       	subi	r30, 0xCC	; 204
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__tablejump2__>
      case 0: PORTB = 64;
  f4:	25 b9       	out	0x05, r18	; 5
	  break;
  f6:	11 c0       	rjmp	.+34     	; 0x11a <main+0x76>
	  case 1: PORTB = 121;
  f8:	35 b9       	out	0x05, r19	; 5
	  break;
  fa:	0f c0       	rjmp	.+30     	; 0x11a <main+0x76>
	  case 2: PORTB = 36;
  fc:	45 b9       	out	0x05, r20	; 5
	  break;
  fe:	0d c0       	rjmp	.+26     	; 0x11a <main+0x76>
	  case 3: PORTB = 48;
 100:	55 b9       	out	0x05, r21	; 5
	  break;
 102:	0b c0       	rjmp	.+22     	; 0x11a <main+0x76>
	  case 4: PORTB = 25;
 104:	65 b9       	out	0x05, r22	; 5
	  break;
 106:	09 c0       	rjmp	.+18     	; 0x11a <main+0x76>
	  case 5: PORTB = 18;
 108:	75 b9       	out	0x05, r23	; 5
	  break;
 10a:	07 c0       	rjmp	.+14     	; 0x11a <main+0x76>
	  case 6: PORTB = 2;
 10c:	c5 b9       	out	0x05, r28	; 5
	  break;
 10e:	05 c0       	rjmp	.+10     	; 0x11a <main+0x76>
	  case 7: PORTB = 120;
 110:	d5 b9       	out	0x05, r29	; 5
	  break;
 112:	03 c0       	rjmp	.+6      	; 0x11a <main+0x76>
	  case 8: PORTB = 0;
 114:	15 b8       	out	0x05, r1	; 5
	  break;
 116:	01 c0       	rjmp	.+2      	; 0x11a <main+0x76>
	  case 9: PORTB = 16;
 118:	15 b9       	out	0x05, r17	; 5
	  break;
	  
	  }
	  switch (c2){
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	81 f0       	breq	.+32     	; 0x142 <main+0x9e>
 122:	28 f4       	brcc	.+10     	; 0x12e <main+0x8a>
 124:	88 23       	and	r24, r24
 126:	49 f0       	breq	.+18     	; 0x13a <main+0x96>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	49 f0       	breq	.+18     	; 0x13e <main+0x9a>
 12c:	d7 cf       	rjmp	.-82     	; 0xdc <main+0x38>
 12e:	84 30       	cpi	r24, 0x04	; 4
 130:	61 f0       	breq	.+24     	; 0x14a <main+0xa6>
 132:	48 f0       	brcs	.+18     	; 0x146 <main+0xa2>
 134:	85 30       	cpi	r24, 0x05	; 5
 136:	59 f0       	breq	.+22     	; 0x14e <main+0xaa>
 138:	d1 cf       	rjmp	.-94     	; 0xdc <main+0x38>
	   case 0: PORTD = 64;
 13a:	2b b9       	out	0x0b, r18	; 11
	   break;
 13c:	cf cf       	rjmp	.-98     	; 0xdc <main+0x38>
	   case 1: PORTD = 121;
 13e:	3b b9       	out	0x0b, r19	; 11
	   break;
 140:	cd cf       	rjmp	.-102    	; 0xdc <main+0x38>
	   case 2: PORTD = 36;
 142:	4b b9       	out	0x0b, r20	; 11
       break;
 144:	cb cf       	rjmp	.-106    	; 0xdc <main+0x38>
	   case 3: PORTD = 48;
 146:	5b b9       	out	0x0b, r21	; 11
       break;
 148:	c9 cf       	rjmp	.-110    	; 0xdc <main+0x38>
	   case 4: PORTD = 25;
 14a:	6b b9       	out	0x0b, r22	; 11
       break;
 14c:	c7 cf       	rjmp	.-114    	; 0xdc <main+0x38>
	   case 5: PORTD = 18;
 14e:	7b b9       	out	0x0b, r23	; 11
	   break; 
 150:	c5 cf       	rjmp	.-118    	; 0xdc <main+0x38>

00000152 <__vector_13>:
    }
}
 return 0;
}

ISR (TIMER1_OVF_vect) {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
	TCNT1 = 49911;
 160:	87 ef       	ldi	r24, 0xF7	; 247
 162:	92 ec       	ldi	r25, 0xC2	; 194
 164:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 168:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	 c1++;
 16c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <c1>
 170:	8f 5f       	subi	r24, 0xFF	; 255
	 
	                     
	if (c1 == 10) {    
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	19 f0       	breq	.+6      	; 0x17c <__vector_13+0x2a>
}

ISR (TIMER1_OVF_vect) {
	TCNT1 = 49911;
	
	 c1++;
 176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <c1>
 17a:	07 c0       	rjmp	.+14     	; 0x18a <__vector_13+0x38>
	 
	                     
	if (c1 == 10) {    
	    c1 = 0;
 17c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <c1>
		c2++;
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	if (c2 == 6) {
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18e:	86 30       	cpi	r24, 0x06	; 6
 190:	11 f4       	brne	.+4      	; 0x196 <__vector_13+0x44>
	    c2 = 0;
 192:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__tablejump2__>:
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	05 90       	lpm	r0, Z+
 1aa:	f4 91       	lpm	r31, Z
 1ac:	e0 2d       	mov	r30, r0
 1ae:	09 94       	ijmp

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
