
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000754  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a9  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002af  00000000  00000000  00001031  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c5  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000016c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>
int i = 0;

int main(void)
{
	DDRD = 255;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0;
  94:	14 b8       	out	0x04, r1	; 4
	PORTD = 255;
  96:	8b b9       	out	0x0b, r24	; 11

	while (1)
	{
		if ( PINB & ( 1 << PB0 ) ) {
		 PORTD = ~ (1 << i);
  98:	e0 e0       	ldi	r30, 0x00	; 0
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
		 }
		}
		if (PINB & ( 1 << PB1 ) ) {
			i = i - 1;
			if ( i < 0 ) {
				i = 7;
  a0:	47 e0       	ldi	r20, 0x07	; 7
  a2:	50 e0       	ldi	r21, 0x00	; 0
	DDRB = 0;
	PORTD = 255;

	while (1)
	{
		if ( PINB & ( 1 << PB0 ) ) {
  a4:	18 9b       	sbis	0x03, 0	; 3
  a6:	20 c0       	rjmp	.+64     	; 0xe8 <main+0x58>
		 PORTD = ~ (1 << i);
  a8:	c9 01       	movw	r24, r18
  aa:	00 80       	ld	r0, Z
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x22>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <main+0x1e>
  b6:	80 95       	com	r24
  b8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f e4       	ldi	r24, 0x4F	; 79
  bc:	93 ec       	ldi	r25, 0xC3	; 195
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x2e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x34>
  c4:	00 00       	nop
		 _delay_ms (200);
		 i = i + 1;
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
		 if ( i > 7 ) {
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	91 05       	cpc	r25, r1
  d4:	2c f4       	brge	.+10     	; 0xe0 <main+0x50>
	while (1)
	{
		if ( PINB & ( 1 << PB0 ) ) {
		 PORTD = ~ (1 << i);
		 _delay_ms (200);
		 i = i + 1;
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  de:	04 c0       	rjmp	.+8      	; 0xe8 <main+0x58>
		 if ( i > 7 ) {
			 i = 0;
  e0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		 }
		}
		if (PINB & ( 1 << PB1 ) ) {
  e8:	19 9b       	sbis	0x03, 1	; 3
  ea:	dc cf       	rjmp	.-72     	; 0xa4 <main+0x14>
			i = i - 1;
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	01 97       	sbiw	r24, 0x01	; 1
			if ( i < 0 ) {
  f6:	2a f0       	brmi	.+10     	; 0x102 <main+0x72>
		 if ( i > 7 ) {
			 i = 0;
		 }
		}
		if (PINB & ( 1 << PB1 ) ) {
			i = i - 1;
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x7a>
			if ( i < 0 ) {
				i = 7;
 102:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <_edata+0x1>
 106:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
			}
			PORTD = ~ ( 1 << i );
 10a:	c9 01       	movw	r24, r18
 10c:	00 80       	ld	r0, Z
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x84>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <main+0x80>
 118:	80 95       	com	r24
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	8f e4       	ldi	r24, 0x4F	; 79
 11e:	93 ec       	ldi	r25, 0xC3	; 195
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x90>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x96>
 126:	00 00       	nop
 128:	bd cf       	rjmp	.-134    	; 0xa4 <main+0x14>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
