
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000754  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a9  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b8  00000000  00000000  00001039  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000170d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int i = 0;


int main(void)
{
DDRD = 255;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
DDRB = 0;
  94:	14 b8       	out	0x04, r1	; 4
PORTD = 255;
  96:	8b b9       	out	0x0b, r24	; 11

    while (1) 
    {
	  while (PINB&(1 << PB0) ) {
		  PORTD = ~ (1 << i);		 
  98:	e0 e0       	ldi	r30, 0x00	; 0
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
		  }
    
   while (PINB&(1 << PB1) ) {
	    i = i - 1 ;
          if (i < 0) {
          i = 7; }
  a0:	47 e0       	ldi	r20, 0x07	; 7
  a2:	50 e0       	ldi	r21, 0x00	; 0
DDRB = 0;
PORTD = 255;

    while (1) 
    {
	  while (PINB&(1 << PB0) ) {
  a4:	18 99       	sbic	0x03, 0	; 3
  a6:	03 c0       	rjmp	.+6      	; 0xae <main+0x1e>
          if (i > 7) {  
 		  i = 0; }
		   _delay_ms (200);
		  }
    
   while (PINB&(1 << PB1) ) {
  a8:	19 99       	sbic	0x03, 1	; 3
  aa:	22 c0       	rjmp	.+68     	; 0xf0 <main+0x60>
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <main+0x14>
PORTD = 255;

    while (1) 
    {
	  while (PINB&(1 << PB0) ) {
		  PORTD = ~ (1 << i);		 
  ae:	c9 01       	movw	r24, r18
  b0:	00 80       	ld	r0, Z
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x28>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <main+0x24>
  bc:	80 95       	com	r24
  be:	8b b9       	out	0x0b, r24	; 11
		  i = i + 1 ;
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
          if (i > 7) {  
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	91 05       	cpc	r25, r1
  ce:	2c f4       	brge	.+10     	; 0xda <main+0x4a>

    while (1) 
    {
	  while (PINB&(1 << PB0) ) {
		  PORTD = ~ (1 << i);		 
		  i = i + 1 ;
  d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <main+0x52>
          if (i > 7) {  
 		  i = 0; }
  da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e4       	ldi	r24, 0x4F	; 79
  e4:	93 ec       	ldi	r25, 0xC3	; 195
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x56>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x5c>
  ec:	00 00       	nop
  ee:	da cf       	rjmp	.-76     	; 0xa4 <main+0x14>
		   _delay_ms (200);
		  }
    
   while (PINB&(1 << PB1) ) {
	    i = i - 1 ;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	01 97       	sbiw	r24, 0x01	; 1
          if (i < 0) {
  fa:	2a f0       	brmi	.+10     	; 0x106 <main+0x76>
 		  i = 0; }
		   _delay_ms (200);
		  }
    
   while (PINB&(1 << PB1) ) {
	    i = i - 1 ;
  fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 104:	04 c0       	rjmp	.+8      	; 0x10e <main+0x7e>
          if (i < 0) {
          i = 7; }
 106:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <_edata+0x1>
 10a:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
	   PORTD = ~ (1 << i);			   
 10e:	c9 01       	movw	r24, r18
 110:	00 80       	ld	r0, Z
 112:	02 c0       	rjmp	.+4      	; 0x118 <main+0x88>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <main+0x84>
 11c:	80 95       	com	r24
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	8f e4       	ldi	r24, 0x4F	; 79
 122:	93 ec       	ldi	r25, 0xC3	; 195
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x94>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x9a>
 12a:	00 00       	nop
          if (i > 7) {  
 		  i = 0; }
		   _delay_ms (200);
		  }
    
   while (PINB&(1 << PB1) ) {
 12c:	19 99       	sbic	0x03, 1	; 3
 12e:	e0 cf       	rjmp	.-64     	; 0xf0 <main+0x60>
 130:	b9 cf       	rjmp	.-142    	; 0xa4 <main+0x14>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
